package client.view;

import client.controller.ClientCtr;
import server.helper.CountDownTimer;
import client.helper.ShipDrawer;
import client.helper.ShipGenerator;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Timer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import shared.dto.ObjectWrapper;

public class SetShipFrm extends javax.swing.JFrame {

    private ClientCtr mySocket;

    private HashMap<String, JToggleButton> buttonIndex = new HashMap<>();
    private ArrayList<String> shipsLocation = new ArrayList<>();
    private JList<String> shipList;
    private DefaultListModel<String> shipListModel;

    private int shipSize; //Kích thước tàu hiện tại được chọn để sắp
    private int shipIndexList; //Vị trí tàu được chọn (trong list) hiện tại trong danh sách tàu
    private boolean horizontal = true;
    
    private boolean playerTurn = false;

    private CountDownTimer timeTask;
    private Timer timer;

    public SetShipFrm(ClientCtr clientCtr) {
        mySocket = clientCtr;
        initComponents();

        lblPlayer.setText(mySocket.getUsername());

        setGrid();
        initiateShips();
        setCountDownTime();
        lblWaiting.setVisible(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDirection = new javax.swing.ButtonGroup();
        btnReady = new javax.swing.JButton();
        panelMatrixShip = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnRandom = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnHori = new javax.swing.JRadioButton();
        btnVerti = new javax.swing.JRadioButton();
        scrollShip = new javax.swing.JScrollPane();
        lblTime = new javax.swing.JLabel();
        lblWaiting = new javax.swing.JLabel();
        lblPlayer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnReady.setText("Ready");
        btnReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadyActionPerformed(evt);
            }
        });

        panelMatrixShip.setBackground(new java.awt.Color(255, 255, 255));
        panelMatrixShip.setLayout(new java.awt.GridLayout(10, 10));

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnRandom.setText("Random");
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnGroupDirection.add(btnHori);
        btnHori.setSelected(true);
        btnHori.setText("Horizontal");
        btnHori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHoriActionPerformed(evt);
            }
        });

        btnGroupDirection.add(btnVerti);
        btnVerti.setText("Vertical");
        btnVerti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVertiActionPerformed(evt);
            }
        });

        lblWaiting.setText("Waiting enemy ready...");

        lblPlayer.setText("name player");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelMatrixShip, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(scrollShip, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lblPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReady)
                    .addComponent(btnReset)
                    .addComponent(btnRandom)
                    .addComponent(btnExit)
                    .addComponent(btnHori, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerti, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(btnReady)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReset)
                        .addGap(18, 18, 18)
                        .addComponent(btnRandom)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btnHori)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVerti)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scrollShip, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelMatrixShip, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(lblWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
        random();
    }//GEN-LAST:event_btnRandomActionPerformed

    private void btnHoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoriActionPerformed
        horizontal = true;
    }//GEN-LAST:event_btnHoriActionPerformed

    private void btnVertiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVertiActionPerformed
        horizontal = false;
    }//GEN-LAST:event_btnVertiActionPerformed

    private void btnReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadyActionPerformed
        ready();
    }//GEN-LAST:event_btnReadyActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        int k = JOptionPane.showConfirmDialog(this, "Bạn có thật sự muốn thoát trận đấu ? Điều này sẽ khiến bạn bị trừ điểm", "Thoát", JOptionPane.YES_NO_OPTION);
        if (k == 0) {
//            timeTask.cancel();
            timer.cancel();
            mySocket.sendData(new ObjectWrapper(ObjectWrapper.QUIT_WHEN_SET_SHIP));

            mySocket.getMainFrm().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnExitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGroupDirection;
    private javax.swing.JRadioButton btnHori;
    private javax.swing.JButton btnRandom;
    private javax.swing.JButton btnReady;
    private javax.swing.JButton btnReset;
    private javax.swing.JRadioButton btnVerti;
    private javax.swing.JLabel lblPlayer;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblWaiting;
    private javax.swing.JPanel panelMatrixShip;
    private javax.swing.JScrollPane scrollShip;
    // End of variables declaration//GEN-END:variables

    private void setGrid() {
        int row = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                String index = row + "" + j;
                JToggleButton button = new JToggleButton();
                button.setName(index);
                button.setOpaque(false);
                buttonIndex.put(index, button);
                panelMatrixShip.add(button);
                button.addActionListener(this::handleGridClick);
            }
            row++;
        }

        JToggleButton firstButton = buttonIndex.get("00");
        int buttonSize = firstButton.getWidth();
        System.out.println("Button size before create draw: " + buttonSize);
    }

    private void handleGridClick(ActionEvent e) {
        JToggleButton button = (JToggleButton) e.getSource();
        button.setSelected(false);

        if (shipSize == 0 || !isValidLocation(button.getName())) {
            System.out.println(shipSize + " " + button.getName());
            return;
        }

        addShip(button.getName());
        shipListModel.remove(shipIndexList);
        resetShipSelection();

        for (String x : shipsLocation) {
            System.out.print(x + " ");
        }
        System.out.println("");
    }

    private boolean isValidLocation(String location) {
        int row = location.charAt(0) - '0';
        int col = location.charAt(1) - '0';

        System.out.println("Check valid location: " + row + " " + col);

        if (horizontal) {
            if (col + shipSize > 10) {
                return false;
            }
        } else {
            if (row + shipSize > 10) {
                return false;
            }
        }

        for (int i = 0; i < shipSize; i++) {
            String loc;
            if (horizontal) {
                loc = String.valueOf(row) + String.valueOf(col + i);
            } else {
                loc = String.valueOf(row + i) + String.valueOf(col);
            }

            if (shipsLocation.contains(loc)) {
                return false;
            }
        }
        return true;
    }

    private void addShip(String location) {
        shipsLocation.add("/");
        int row = location.charAt(0) - '0';
        int col = location.charAt(1) - '0';

        ShipDrawer drawer = new ShipDrawer(buttonIndex);
        List<String> currentShip = new ArrayList<>();

        for (int i = 0; i < shipSize; i++) {
            shipsLocation.add(location);
            currentShip.add(location);
            location = horizontal ? row + "" + ++col : ++row + "" + col;
        }

        drawer.drawCompleteShip(currentShip);
    }

    private void resetShipSelection() {
        shipIndexList = 5;
        shipSize = 0;
    }

    private void random() {
        reset();
        shipsLocation = ShipGenerator.generateShip();

        for (String x : shipsLocation) {
            System.out.print(x + " ");
        }
        System.out.println("");

        ShipDrawer drawer = new ShipDrawer(buttonIndex);
        List<String> currentShip = new ArrayList<>();

        for (String loc : shipsLocation) {
            if (loc.equals("/")) {
                if (!currentShip.isEmpty()) {
                    drawer.drawCompleteShip(currentShip);
                    currentShip = new ArrayList<>();
                }
                currentShip = new ArrayList<>();
            } else {
                currentShip.add(loc);
            }
        }
        // Vẽ con tàu cuối cùng nếu có
        if (!currentShip.isEmpty()) {
            drawer.drawCompleteShip(currentShip);
        }

        shipListModel.removeAllElements();
    }

    private void initiateShips() {
        shipListModel = new DefaultListModel<>();
        shipList = new JList<>(shipListModel);
        shipListModel.addAll(Arrays.asList("Battleship", "Cruise", "Destroyer", "Destroyer", "Submarine"));
        shipList.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (shipListModel.getElementAt(shipList.getSelectedIndex()).equals("Battleship")) {
                    shipSize = 5;
                } else if (shipListModel.getElementAt(shipList.getSelectedIndex()).equals("Cruise")) {
                    shipSize = 4;
                } else if (shipListModel.getElementAt(shipList.getSelectedIndex()).equals("Destroyer")) {
                    shipSize = 3;
                } else if (shipListModel.getElementAt(shipList.getSelectedIndex()).equals("Submarine")) {
                    shipSize = 2;
                }
                shipIndexList = shipList.getSelectedIndex();
                System.out.println("ShipIndexList: " + shipIndexList + " shipSize: " + shipSize);
            }
        });

        scrollShip.setViewportView(shipList);
    }

    private void reset() {
        shipsLocation.clear();
        initiateShips();
        for (JToggleButton button : buttonIndex.values()) {
            button.setSelected(false);
            button.setEnabled(true);
            button.setIcon(null);
        }
    }

    private void setCountDownTime() {
        timeTask = new CountDownTimer(21);
        timer = new Timer();
        timer.scheduleAtFixedRate(timeTask, 0, 1000);

        // Sử dụng Swing Timer để cập nhật form và kiểm tra khi hết giờ
        new javax.swing.Timer(1000, e -> {
            int timeRemaining = timeTask.getTimeRemaining();

            // Cập nhật thời gian lên JLabel trong form
            lblTime.setText(String.valueOf(timeRemaining));
            lblTime.repaint();

            // Kiểm tra khi hết giờ và xử lý trực tiếp trong form
            if (timeRemaining <= 0) {
                ((javax.swing.Timer) e.getSource()).stop(); // Dừng Swing Timer
            }
        }).start();

    }

    private void ready() {
        if (shipListModel.getSize() == 0) {
//            timeTask.cancel();
            timer.cancel();

            ObjectWrapper objectWrapper = new ObjectWrapper(ObjectWrapper.READY_PLAY_GAME, shipsLocation);
            mySocket.sendData(objectWrapper);

            lblWaiting.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Hãy đặt tất cả tàu");
        }
    }

    public void receivedDataProcessing(ObjectWrapper data) {
        switch (data.getPerformative()) {
            case ObjectWrapper.SERVER_RANDOM_NOT_TURN:
                playerTurn = false;
                break;
            case ObjectWrapper.SERVER_RANDOM_TURN:
                playerTurn = true;
                break;
            case ObjectWrapper.SERVER_REQUEST_READY_GAME:
                System.out.println("Frm: Người này chưa xếp xong");
                random();
                ready();
                break;
            case ObjectWrapper.SERVER_START_PLAY_GAME:
                PlayFrm playFrm = new PlayFrm(mySocket, playerTurn, shipsLocation);
                mySocket.setPlayFrm(playFrm);

                mySocket.getPlayFrm().setVisible(true);
                this.dispose();
                break;
            case ObjectWrapper.SERVER_TRANSFER_QUIT_WHEN_SET_SHIP:
//                timeTask.cancel();
                timer.cancel();
                JOptionPane.showMessageDialog(this, "Đối thủ của bạn đã rời đi, nhấn OK để xem kết quả", "Kết thúc trận đấu", JOptionPane.INFORMATION_MESSAGE);
                ResultFrm resultFrm = new ResultFrm(mySocket);
                mySocket.setResultFrm(resultFrm);

                mySocket.getResultFrm().setVisible(true);
                this.dispose();
                break;

        }
    }
}
