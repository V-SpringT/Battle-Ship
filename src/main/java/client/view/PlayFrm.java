package client.view;

import client.controller.ClientCtr;
import server.helper.CountDownTimer;
import client.helper.ShipDrawer;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Timer;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultCaret;
import shared.dto.ObjectWrapper;

public class PlayFrm extends javax.swing.JFrame {

    private ClientCtr mySocket;
    private boolean playerTurn = false;
    private ArrayList<String> shipsLocation = new ArrayList<>();

    private HashMap<String, JToggleButton> buttonIndex = new HashMap<>();
    private HashMap<String, JToggleButton> buttonEnemyIndex = new HashMap<>();
    private ShipDrawer drawerBtn;
    private ShipDrawer drawerBtnEnemy;

    private HashSet<JToggleButton> buttonEnemyShooted = new HashSet<>(); // Lưu các nút đã bị bắn

    private CountDownTimer timeTask;
    private Timer timer;

    public PlayFrm(ClientCtr clientCtr, boolean isPlayerTurn, ArrayList<String> locations) {
        mySocket = clientCtr;
        playerTurn = isPlayerTurn;
        shipsLocation = locations;

        initComponents();

        DefaultCaret caret = (DefaultCaret) txtLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        lblPlayer.setText(mySocket.getUsername());

        setGrid();
        SwingUtilities.invokeLater(this::drawMyShips);

        if (playerTurn) {
            startPlayerTurn();
        } else {
            startEnemyTurn();
        }

//        setCountDownTime(17);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDirection = new javax.swing.ButtonGroup();
        btnQuit = new javax.swing.JButton();
        lblEnemyWaiting = new javax.swing.JLabel();
        lblPlayer = new javax.swing.JLabel();
        panelMatrixShipEnemy = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        lblWaiting = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        panelMatrixShip = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnQuit.setText("Quit");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        lblEnemyWaiting.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblEnemyWaiting.setText("Your enemy turn !");

        lblPlayer.setText("name player");

        panelMatrixShipEnemy.setBackground(new java.awt.Color(255, 255, 255));
        panelMatrixShipEnemy.setLayout(new java.awt.GridLayout(10, 10));

        lblTime.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N

        lblWaiting.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblWaiting.setText("Your turn !");

        jScrollPane1.setAutoscrolls(true);

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        panelMatrixShip.setBackground(new java.awt.Color(255, 255, 255));
        panelMatrixShip.setLayout(new java.awt.GridLayout(10, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(lblPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(222, 222, 222)
                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnQuit))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(panelMatrixShip, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                                        .addComponent(panelMatrixShipEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEnemyWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelMatrixShipEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelMatrixShip, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblWaiting, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEnemyWaiting, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(68, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(btnQuit)
                        .addGap(35, 35, 35))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        int k = JOptionPane.showConfirmDialog(this, "Bạn có thật sự muốn thoát trận đấu ? Điều này sẽ khiến bạn bị trừ điểm", "Thoát", JOptionPane.YES_NO_OPTION);
        if (k == 0) {
//            timeTask.cancel();
            timer.cancel();
            mySocket.sendData(new ObjectWrapper(ObjectWrapper.QUIT_WHEN_PLAY));

            mySocket.getMainFrm().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnQuitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupDirection;
    private javax.swing.JButton btnQuit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEnemyWaiting;
    private javax.swing.JLabel lblPlayer;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblWaiting;
    private javax.swing.JPanel panelMatrixShip;
    private javax.swing.JPanel panelMatrixShipEnemy;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables

    private void setGrid() {
        int row = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                String index = row + "" + j;

                JToggleButton button = new JToggleButton();
                button.setName(index);
                button.setOpaque(false);
                button.setEnabled(false);
                buttonIndex.put(index, button);
                panelMatrixShip.add(button);
            }
            row++;
        }

        row = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                String index = row + "" + j;

                JToggleButton buttonEnemy = new JToggleButton();
                buttonEnemy.setName(index);
                buttonEnemy.setOpaque(false);
                buttonEnemyIndex.put(index, buttonEnemy);
                panelMatrixShipEnemy.add(buttonEnemy);
                buttonEnemy.addActionListener(this::handleGridClick);
            }
            row++;
        }
        drawerBtn = new ShipDrawer(buttonIndex);
        drawerBtnEnemy = new ShipDrawer(buttonEnemyIndex);
    }

    private void drawMyShips() {
        List<String> currentShip = new ArrayList<>();

        for (String loc : shipsLocation) {
            if (loc.equals("/")) {
                if (!currentShip.isEmpty()) {
                    drawerBtn.drawCompleteShip(currentShip);
                    currentShip = new ArrayList<>();
                }
                currentShip = new ArrayList<>();
            } else {
                currentShip.add(loc);
            }
        }
        // Vẽ con tàu cuối cùng nếu có
        if (!currentShip.isEmpty()) {
            drawerBtn.drawCompleteShip(currentShip);
        }
    }

    private void handleGridClick(ActionEvent e) {
        JToggleButton button = (JToggleButton) e.getSource();
        button.setSelected(false);

        String location = button.getName();
        buttonEnemyShooted.add(button);

        timer.cancel();
        mySocket.sendData(new ObjectWrapper(ObjectWrapper.SHOOT_REQUEST, location));
    }

    private void setCountDownTime(int timeRemain) {
        timeTask = new CountDownTimer(timeRemain);
        timer = new Timer();
        timer.scheduleAtFixedRate(timeTask, 0, 1000);

        // Sử dụng Swing Timer để cập nhật form và kiểm tra khi hết giờ
        new javax.swing.Timer(1000, e -> {
            int timeRemaining = timeTask.getTimeRemaining();

            // Cập nhật thời gian lên JLabel trong form
            lblTime.setText(String.valueOf(timeRemaining));
            lblTime.repaint();

            // Kiểm tra khi hết giờ và xử lý trực tiếp trong form
            if (timeRemaining <= 0) {
                ((javax.swing.Timer) e.getSource()).stop(); // Dừng Swing Timer              
            }
        }).start();

    }

    // Phương thức bật/tắt trạng thái tương tác của lưới đối thủ
    private void setEnemyGridEnabled(boolean enabled) {
        for (JToggleButton button : buttonEnemyIndex.values()) {
            if (!buttonEnemyShooted.contains(button)) {
                button.setEnabled(enabled);
            }
        }
    }

    // Khi bắt đầu lượt của người chơi, kích hoạt lại lưới
    public void startPlayerTurn() {
        setEnemyGridEnabled(true);
        lblEnemyWaiting.setVisible(false);
        lblWaiting.setVisible(true);
        setCountDownTime(16);
        playerTurn = true;
    }

    // Khi kết thúc lượt của người chơi, vô hiệu hóa lưới
    public void startEnemyTurn() {
        setEnemyGridEnabled(false);
        lblEnemyWaiting.setVisible(true);
        lblWaiting.setVisible(false);
        setCountDownTime(16);
        playerTurn = false;
    }

    public void receivedDataProcessing(ObjectWrapper data) {
        switch (data.getPerformative()) {
            case ObjectWrapper.SERVER_TRANSFER_SHOOT_FAILTURE:
                if (playerTurn) {
                    drawerBtnEnemy.drawMiss((String) data.getData());
                    txtLog.append("Bạn đã bắn hụt\n");
                    startEnemyTurn();
                } else {
                    drawerBtn.drawMiss((String) data.getData());
                    txtLog.append("Đối thủ của bạn đã bắn hụt\n");
                    startPlayerTurn();
                }
                break;
            case ObjectWrapper.SERVER_TRANSFER_SHOOT_HIT_POINT:
                if (playerTurn) {
                    drawerBtnEnemy.drawHit((String) data.getData());
                    txtLog.append("Bạn đã bắn trúng 1 con tàu\n");
                    startPlayerTurn();
                } else {
                    drawerBtn.drawHit((String) data.getData());
                    txtLog.append("Đối thủ của bạn đã bắn trúng tàu\n");
                    startEnemyTurn();
                }
                break;
            case ObjectWrapper.SERVER_TRANSFER_SHOOT_HIT_SHIP:
                String[] ship = (String[]) data.getData();
                if (playerTurn) {
                    drawerBtnEnemy.drawDestroyedShip(ship);
                    txtLog.append("Bạn đã phá huỷ 1 con tàu " + ship.length + " ô\n");
                    startPlayerTurn();
                } else {
                    drawerBtn.drawDestroyedShip(ship);
                    txtLog.append("Đối thủ của bạn đã phá huỷ 1 con tàu " + ship.length + " ô\n");
                    startEnemyTurn();
                }
                break;
            case ObjectWrapper.SERVER_TRANSFER_SHOOT_MISS_TURN:
                if (playerTurn) {
                    txtLog.append("Bạn bị mất lượt\n");
                    startEnemyTurn();
                } else {
                    txtLog.append("Đối thủ của bạn bị mất lượt\n");
                    startPlayerTurn();
                }
                break;
            case ObjectWrapper.SERVER_TRANSFER_END_GAME:
                if (playerTurn) {
                    drawerBtnEnemy.drawDestroyedShip((String[]) data.getData());
                    txtLog.append("Bạn đã chiến thắng\n");
                    timer.cancel();
                } else {
                    drawerBtn.drawDestroyedShip((String[]) data.getData());
                    txtLog.append("Bạn đã thua cuộc\n");
                    timer.cancel();
                }

                JOptionPane.showMessageDialog(this, "Trận đấu đã kết thúc, nhấn OK để xem kết quả", "Kết thúc trận đấu", JOptionPane.INFORMATION_MESSAGE);
                ResultFrm resultFrm = new ResultFrm(mySocket);
                mySocket.setResultFrm(resultFrm);

                mySocket.getResultFrm().setVisible(true);
                this.dispose();
                break;
            case ObjectWrapper.SERVER_TRANSFER_QUIT_WHEN_PLAY:
//                timeTask.cancel();
                timer.cancel();
                JOptionPane.showMessageDialog(this, "Đối thủ của bạn đã rời đi, nhấn OK để xem kết quả", "Kết thúc trận đấu", JOptionPane.INFORMATION_MESSAGE);
                ResultFrm resultFrm1 = new ResultFrm(mySocket);
                mySocket.setResultFrm(resultFrm1);

                mySocket.getResultFrm().setVisible(true);
                this.dispose();
                break;
        }
    }
}
