/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client.view;

import client.controller.GameCtr;
import client.helper.CountDownTimer;
import client.helper.ShipDrawer;
import client.helper.ShipGenerator;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import shared.model.ObjectWrapper;

public class PlayFrm extends javax.swing.JFrame {

    private GameCtr gameCtr;

    private HashMap<String, JToggleButton> buttonIndex = new HashMap<>();
    private HashMap<String, JToggleButton> buttonEnemyIndex = new HashMap<>();

    public PlayFrm(GameCtr gameController) {
        gameCtr = gameController;
        initComponents();

        lblPlayer.setText(gameCtr.getMySocket().getUsername());

        setGrid();
//        setCountDownTime();
    }

    // to design
    public PlayFrm() {
        initComponents();

        setGrid();

//        drawMyShips();
        SwingUtilities.invokeLater(this::drawMyShips);
//        setCountDownTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDirection = new javax.swing.ButtonGroup();
        btnQuit = new javax.swing.JButton();
        lblWaiting = new javax.swing.JLabel();
        lblPlayer = new javax.swing.JLabel();
        panelMatrixShipEnemy = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        lblWaiting2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        panelMatrixShip = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnQuit.setText("Quit");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        lblWaiting.setText("Your enemy turn !");

        lblPlayer.setText("name player");

        panelMatrixShipEnemy.setBackground(new java.awt.Color(255, 255, 255));
        panelMatrixShipEnemy.setLayout(new java.awt.GridLayout(10, 10));

        lblWaiting2.setText("Your turn !");

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        panelMatrixShip.setBackground(new java.awt.Color(255, 255, 255));
        panelMatrixShip.setLayout(new java.awt.GridLayout(10, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnQuit))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblWaiting2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(panelMatrixShip, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                                        .addComponent(panelMatrixShipEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelMatrixShipEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelMatrixShip, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWaiting2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(68, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(btnQuit)
                        .addGap(35, 35, 35))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed

    }//GEN-LAST:event_btnQuitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGroupDirection;
    private javax.swing.JButton btnQuit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPlayer;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblWaiting;
    private javax.swing.JLabel lblWaiting2;
    private javax.swing.JPanel panelMatrixShip;
    private javax.swing.JPanel panelMatrixShipEnemy;
    private javax.swing.JTextArea txtLog;
    // End of variables declaration//GEN-END:variables

    private void setGrid() {
        int row = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                String index = row + "" + j;

                JToggleButton button = new JToggleButton();
                button.setName(index);
                button.setOpaque(false);
                button.setEnabled(false);
                buttonIndex.put(index, button);
                panelMatrixShip.add(button);
            }
            row++;
        }

        row = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                String index = row + "" + j;

                JToggleButton buttonEnemy = new JToggleButton();
                buttonEnemy.setName(index);
                buttonEnemy.setOpaque(false);
                buttonEnemyIndex.put(index, buttonEnemy);
                panelMatrixShipEnemy.add(buttonEnemy);
                buttonEnemy.addActionListener(this::handleGridClick);
            }
            row++;
        }
    }

    private void drawMyShips() {
        ArrayList<String> shipsLocation = ShipGenerator.generateShip();
        for (String x : shipsLocation) {
            System.out.print(x + " ");
        }
        System.out.println("");

        JToggleButton firstButton = buttonIndex.get("00");
        int buttonSize = firstButton.getWidth();
        System.out.println("Button size before create draw: " + firstButton.getWidth() + " " + firstButton.getHeight());

        ShipDrawer drawer = new ShipDrawer(buttonIndex);
        List<String> currentShip = new ArrayList<>();

        for (String loc : shipsLocation) {
            if (loc.equals("/")) {
                if (!currentShip.isEmpty()) {
                    for (String x : currentShip) {
                        System.out.print(x + "");
                    }
                    System.out.println("");
                    drawer.drawCompleteShip(currentShip);
                    currentShip = new ArrayList<>();
                }
                currentShip = new ArrayList<>();
            } else {
                currentShip.add(loc);
            }
        }
        // Vẽ con tàu cuối cùng nếu có
        if (!currentShip.isEmpty()) {
            drawer.drawCompleteShip(currentShip);
        }
    }

    private void handleGridClick(ActionEvent e) {

//        JToggleButton button = (JToggleButton) e.getSource();
//        button.setSelected(false);
//
//        if (shipSize == 0 || !isValidLocation(button.getName())) {
//            System.out.println(shipSize + " " + button.getName());
//            return;
//        }
//
//        addShip(button.getName());
//        shipListModel.remove(shipIndexList);
//        resetShipSelection();
//
//        for (String x : shipsLocation) {
//            System.out.print(x + " ");
//        }
//        System.out.println("");
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayFrm().setVisible(true);
            }
        });
    }

    private void setCountDownTime() {
//        timeTask = new CountDownTimer(7);
//        timer = new Timer();
//        timer.scheduleAtFixedRate(timeTask, 0, 1000);
//
//        // Sử dụng Swing Timer để cập nhật form và kiểm tra khi hết giờ
//        new javax.swing.Timer(1000, e -> {
//            int timeRemaining = timeTask.getTimeRemaining();
//
//            // Cập nhật thời gian lên JLabel trong form
//            lblTime.setText(String.valueOf(timeRemaining));
//            lblTime.repaint();
//
//            // Kiểm tra khi hết giờ và xử lý trực tiếp trong form
//            if (timeRemaining <= 0) {
//                ((javax.swing.Timer) e.getSource()).stop(); // Dừng Swing Timer
//                random();
//                ready();
//            }
//        }).start();

    }

    public void receivedDataProcessing(ObjectWrapper data) {
        switch (data.getPerformative()) {
            case ObjectWrapper.SERVER_TRANSFER_POSITION_ENEMY_SHIP:
                ArrayList<String> enemyShipsLocation = (ArrayList<String>) data.getData();
                gameCtr.setEnemyShips(enemyShipsLocation);

                for (String x : gameCtr.getEnemyShips()) {
                    System.out.print(x);
                }

                break;
            case ObjectWrapper.SERVER_RANDOM_NOT_TURN:
                gameCtr.setPlayerTurn(false);
                break;
            case ObjectWrapper.SERVER_RANDOM_TURN:
                gameCtr.setPlayerTurn(true);
                break;
            case ObjectWrapper.SERVER_START_PLAY_GAME:
                PlayFrm playFrm = new PlayFrm(gameCtr);
                gameCtr.setPlayFrm(playFrm);

                gameCtr.getPlayFrm().setVisible(true);
                this.dispose();
                break;

        }
    }
}
